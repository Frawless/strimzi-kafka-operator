# Triggers
trigger:
  branches:
    include:
      - '*'

# Base system
pool:
  vmImage: 'Ubuntu-18.04'

# Environment variables
variables:
  ${{ if eq( variables['Build.SourceBranchName'], 'azure-pipelines-pr-test ' ) }}:
    pull_request: false
    docker_org: frawless
    tag: latest
  ${{ if ne( variables['Build.SourceBranchName'], 'master' ) }}:
    pull_request: true
    tag: pr
  commit: $(Build.SourceVersion)
  branch: $(Build.SourceBranchName)
  docker_registry: docker.io
  test_cluster: minikube
  test_kubectl_version: v1.15.0
  test_nsenter_version: 2.32
  test_helm_version: v2.16.3
  test_minikube_version: v1.2.0
  strimzi_default_log_level: DEBUG
  docker_build_args: "-q"

# Pipeline steps
steps:
  - bash: |
      echo "BRANCH: $(BRANCH)"
      echo "TAG: $(TAG)"
      echo "COMMIT: $(COMMIT)"
      echo "PULL_REQUEST: $(PULL_REQUEST)"
      echo "DOCKER_ORG: $(DOCKER_ORG)"
      echo "REASON: $(Build.Reason)"
    displayName: 'Print environment variables'


  - task: UseRubyVersion@0
    inputs:
      versionSpec: '>= 2.4'
      addToPath: true

  - bash: gem install asciidoctor
    displayName: 'Install asciidoctor'

# Docker installed via this task is not available under root
#  - task: DockerInstaller@0
#    displayName: Docker Installer
#    inputs:
#      dockerVersion: 19.03.5
#      releaseType: stable

  - bash: ".azure/scripts/setup_docker.sh"
    displayName: "Setup Docker environment"

  - task: Maven@3
    inputs:
      mavenPomFile: 'pom.xml'
      mavenOptions: '-Xmx3072m'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.11'
      jdkArchitectureOption: 'x64'
      publishJUnitResults: true
      testResultsFiles: '**/surefire-reports/TEST-*.xml'
      goals: 'install'
      options: '-DskipTests -q -Dmaven.javadoc.skip=true -B -V'
    displayName: 'Build Strimzi project'

  - bash: ".travis/install_yq.sh"
    displayName: "Install yq"

  - bash: ".travis/setup-kubernetes.sh"
    displayName: "Setup Minikube cluster"

  - bash: ".travis/build.sh"
    displayName: "Build images"

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: '**/TEST-*.xml'
      testRunTitle: "Unit & Integration tests"
    condition: always()



