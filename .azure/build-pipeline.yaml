# Triggers
trigger:
  branches:
    include:
      - 'azure-pipelines-pr-test'
#pr:
#  branches:
#    include:
#      - '*'

strategy:
  matrix:
    'java-8':
      image: 'Ubuntu-18.04'
      jdk_version: '1.8'
      jdk_path: '/usr/lib/jvm/zulu-8-azure-amd64'
    'java-11':
      image: 'Ubuntu-18.04'
      jdk_version: '11'
      jdk_path: '/usr/lib/jvm/zulu-11-azure-amd64'
#      jdk_path: '/usr/lib/jvm/java-1.11.0-openjdk-amd64'

# Base system
pool:
  vmImage: $(image)

# Environment variables
variables:
  ${{ if eq( variables['Build.SourceBranchName'], 'azure-pipelines-pr-test' ) }}:
    pull_request: false
    docker_org: strimzi
    tag: latest
    commit: latest
  ${{ if ne( variables['Build.SourceBranchName'], 'azure-pipelines-pr-test' ) }}:
    pull_request: true
    docker_org: strimzici
    commit: $(Build.SourceVersion)
    tag: pr
  repo_slug: $(Build.Repository.Name)
  branch: $(Build.SourceBranchName)
  commit_message: $(Build.SourceVersionMessage)
  test_cluster: minikube
  test_kubectl_version: v1.15.0
  test_nsenter_version: 2.32
  test_helm_version: v2.16.3
  test_minikube_version: v1.2.0
  strimzi_default_log_level: DEBUG
  docker_build_args: "-q"
  mvn_args: "-DskipITs"
  docker_registry: docker.io
  java_version: $(jdk_version)

# Pipeline steps
steps:
  - bash: |
      echo "##vso[task.setvariable variable=JAVA_HOME]$(jdk_path)"
      echo "##vso[task.setvariable variable=JAVA_HOME__X64]$(jdk_path)"
      echo "##vso[task.setvariable variable=PATH]$(jdk_path)/bin:$(PATH)"
    displayName: 'Setup JAVA_HOME'

  - bash: |
      echo "BRANCH: $(BRANCH)"
      echo "TAG: $(TAG)"
      echo "COMMIT: $(COMMIT)"
      echo "PULL_REQUEST: $(PULL_REQUEST)"
      echo "DOCKER_ORG: $(DOCKER_ORG)"
      echo "DOCKER_REGISTRY: $(DOCKER_REGISTRY)"
      echo "COMMIT_MESSAGE: $(COMMIT_MESSAGE)"
      echo "REASON: $(Build.Reason)"
      echo "JAVA: $(JAVA_HOME)"
      echo "REPO_SLUG: $(REPO_SLUG)"
      echo "PATH: $(PATH)"
      echo "JAVA_HOME: $(JAVA_HOME)"
      echo "JAVA_HOME__X64: $(JAVA_HOME__X64)"
      echo "JAVA_VERSION: $(JAVA_VERSION)"
      echo "TARGET_BRANCH: $(System.PullRequest.TargetBranch)"
      java -version
      which java
    displayName: 'Print environment variables'

  - task: UseRubyVersion@0
    inputs:
      versionSpec: '>= 2.4'
      addToPath: true

  - bash: gem install asciidoctor
    displayName: 'Install asciidoctor'

  - bash: ".azure/scripts/setup_docker.sh"
    displayName: "Setup Docker environment"

  - task: Maven@3
    inputs:
      mavenPomFile: 'pom.xml'
      mavenOptions: '-Xmx3072m'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: 'default'
      jdkArchitectureOption: 'x64'
      goals: 'install'
      options: '-DskipTests -q -Dmaven.javadoc.skip=true -B -V'
    displayName: 'Build Strimzi project'

  - bash: ".travis/install_yq.sh"
    displayName: "Install yq"

  - bash: ".travis/setup-kubernetes.sh"
    displayName: "Setup Minikube cluster"

  - bash: ".travis/build.sh"
    env:
      DOCKER_USER: $(DOCKER_USER)
      DOCKER_PASS: $(DOCKER_PASS_SECRET)
    displayName: "Build images"

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: '**/TEST-*.xml'
      testRunTitle: "Unit & Integration tests"
    condition: always()



