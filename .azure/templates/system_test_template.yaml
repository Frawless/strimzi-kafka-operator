
parameters:
  name: ''
  test_case: ''
  groups: ''
  cluster_operator_install_type: ''

jobs:
- job: 'strimzi_release_systemtest'
  displayName: 'Release tests'
  # Strategy for the job
  strategy:
    matrix:
      ${{ parameters.name }}:
        image: 'Ubuntu-18.04'
        jdk_version: '11'
        jdk_path: '/usr/lib/jvm/java-11-openjdk-amd64'
  # Base system
  pool:
    vmImage: 'Ubuntu-18.04'
  # Environment variables
  variables:
    - template: 'default_variables.yaml'
  # Set timeout for jobs
  timeoutInMinutes: 720
  # Pipeline steps
  steps:
    - template: 'setup_java.yaml'
      parameters:
        JDK_PATH: $(jdk_path)
        JDK_VERSION: $(jdk_version)

    - script: echo "##vso[task.setvariable variable=docker_tag]$([[ $(cat release.version) == *SNAPSHOT* ]] && echo "latest" || cat release.version )"
      displayName: "Set release tag as DOCKER_TAG for tests"

    - template: "log_variables.yaml"

    - bash: ".azure/scripts/setup_upgrade.sh"
      displayName: "Setup environment for upgrade"
      condition: eq(variables['groups'], 'upgrade')

    - task: DockerInstaller@0
      displayName: Docker Installer
      inputs:
        dockerVersion: 19.03.9
        releaseType: stable

    - bash: ".azure/scripts/setup_shellcheck.sh"
      displayName: "Setup Shellcheck"

    - bash: ".travis/install_yq.sh"
      displayName: "Install yq"

    - bash: ".travis/setup-kubernetes.sh"
      displayName: "Setup Minikube cluster"

    - bash: ".travis/setup-helm.sh"
      displayName: "Setup Helm"
      env:
        TEST_HELM2_VERSION: 'v2.16.3'
        TEST_HELM3_VERSION: 'v3.2.0'

    - template: "build_strimzi.yaml"

    - bash: |
        make docker_build
        make docker_tag
      env:
        MVN_ARGS: '-B -DskipTests'
      displayName: "Build Strimzi images"
      condition: eq(variables['docker_tag'], 'latest')

    - task: Maven@3
      inputs:
        mavenPomFile: 'systemtest/pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: 'default'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/failsafe-reports/TEST-*.xml'
        goals: 'verify'
        options: '-Dgroups=${{ parameters.groups }} -Dit.test=${{ parameters.test_case }} -DexcludedGroups=flaky,loadbalancer -Dmaven.javadoc.skip=true -B -V -Dfailsafe.rerunFailingTestsCount=2'
      env:
        OPERATOR_IMAGE_PULL_POLICY: "IfNotPresent"
        DOCKER_TAG: $(docker_tag)
        CLUSTER_OPERATOR_INSTALL_TYPE: ${{ parameters.cluster_operator_install_type }}
      displayName: 'Run systemtests'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: JUnit
        testResultsFiles: '**/TEST-*.xml'
        searchFolder: "systemtest"
        testRunTitle: "System tests"
      condition: always()

    - bash: |
        rm -rf systemtest/target/logs/timeMeasuring
      displayName: 'Remove timeMeasuring dir from logs'
      condition: failed()

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: 'systemtest/target/logs/'
        artifactName: systemtest-logs
      displayName: 'Publish logs from failed tests'
      condition: failed()
